/*  
=================================================================  
Stored Procedure: Load Silver Layer (Bronze -> Silver)  
=================================================================  

Script Purpose:  
    This stored procedure performs the ETL (Extract, Transform, Load) process to  
    populate the 'silver' schema tables from the 'bronze' schema.  

Actions Performed:  
    - Truncates Silver tables.  
    - Inserts transformed and cleansed data from Bronze into Silver tables.  

Parameters:  
    None.  
    This stored procedure does not accept any parameters or return any values.  

Usage Example:  
    EXEC Silver.load_silver;  

=================================================================  
*/  



-- inserting data from bronze layer

--EXEC silver.load_silver;

CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
	DECLARE @start_time DATETIME, @end_time DATETIME;
	BEGIN TRY
	PRINT '=================================';
	PRINT 'Loading silver layer'
	PRINT '=================================';
--======================================================================================================================================--
	PRINT '---------------------------------';
	PRINT 'Loading CRM tables';
	PRINT '---------------------------------';

--======================================================================================================================================--	
	--truncate
	SET @start_time =GETDATE();
	PRINT '>> Truncating table silver.crm_cust_info';

		--load
	PRINT '>> Inserting data into table silver.crm_cust_info';
	-- Full refresh of customer data in silver layer
	TRUNCATE TABLE silver.crm_cust_info;  -- Clear existing data

	INSERT INTO silver.crm_cust_info (
		cst_id, cst_key, cst_firstname, cst_lastname, 
		cst_marital_status, cst_gndr, cst_create_date
	)
	SELECT  
		cst_id,
		cst_key,
		TRIM(cst_firstname),  -- Clean names
		TRIM(cst_lastname),
		CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'   -- S → Single
			 WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'  -- M → Married
			 ELSE 'n/a' END AS cst_marital_status,
		CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'  -- F/M → Full labels
			 WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
			 ELSE 'n/a' END AS cst_gndr,
		cst_create_date
		 -- Remove `AS dwh_create_date` here (already in column list)
	FROM (
		SELECT *,
			ROW_NUMBER() OVER (
				PARTITION BY cst_id 
				ORDER BY cst_create_date DESC  -- Latest record wins
			) AS flag_last
		FROM bronze.crm_cust_info
		WHERE cst_id IS NOT NULL  -- Filter bad data
	) t  -- Ensure subquery is properly closed with `) t`
	WHERE flag_last = 1;  -- Deduplicate
	SET @end_time =GETDATE();
	PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time,@end_time) AS Nvarchar) + 'seconds';
	PRINT '>> -------------';

	--======================================================================================================================================--
	--truncate
	SET @start_time =GETDATE();
	PRINT '>> Truncating table silver.crm_prd_info'
	-- Full refresh of product data in silver layer
	TRUNCATE TABLE silver.crm_prd_info;  -- Clear existing data to avoid duplicates

	-- Insert transformed data from bronze to silver layer
	INSERT INTO silver.crm_prd_info (
		prd_id,cat_id, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt
	)
	SELECT  
		[prd_id],  -- Original ID
		REPLACE(SUBSTRING(prd_key,1,5), '-','_') AS cat_id,  -- Category ID: first 5 chars
		SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key,  -- Product key: chars 7+
		[prd_nm],  -- Product name
		ISNULL(prd_cost,0) AS prd_cost,  -- Default to 0 if null
		CASE  -- Map product line codes
			WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'  -- M
			WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'      -- R
			WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other sales' -- S
			WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'   -- T
			ELSE 'n/a'  -- Fallback
		END AS prd_line,
		CAST(prd_start_dt AS DATE) AS prd_start_dt,  -- Date conversion
		CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 
			AS DATE) AS prd_end_dt   -- Day before next version or today

	FROM [bronze].[crm_prd_info]  -- Source table
	SET @end_time =GETDATE();
	PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time,@end_time) AS Nvarchar) + 'seconds';
	PRINT '>> -------------';
	--======================================================================================================================================--
	SET @start_time =GETDATE();
	PRINT '>> Truncating table silver.crm_sales_details'
	-- Remove all existing records from the target table  
	TRUNCATE TABLE silver.crm_sales_details  

	-- Insert transformed data into the target table  
	INSERT INTO silver.crm_sales_details(  
		sls_ord_num,  
		sls_prd_key,  
		sls_cust_id,  
		sls_order_dt,  
		sls_ship_dt,  
		sls_due_dt,  
		sls_sales,  
		sls_price,  
		sls_quantity  
	)  
	SELECT  
		[sls_ord_num],  
		[sls_prd_key],  
		[sls_cust_id],  

		-- Convert order date if valid, otherwise set to NULL  
		CASE  
			WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL  
			ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)  
		END AS sls_order_dt,  

		-- Convert ship date if valid, otherwise set to NULL  
		CASE  
			WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL  
			ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)  
		END AS sls_ship_dt,  

		-- Convert due date if valid, otherwise set to NULL  
		CASE  
			WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL  
			ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)  
		END AS sls_due_dt,  

		-- Ensure sales value is correct (fallback: quantity * absolute price)  
		CASE  
			WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)  
				THEN sls_quantity * ABS(sls_price)  
			ELSE sls_sales  
		END AS sls_sales,  

		-- Ensure price is valid (fallback: sales / quantity)  
		CASE  
			WHEN sls_price IS NULL OR sls_price <= 0  
				THEN sls_sales / NULLIF(sls_quantity, 0)  
			ELSE sls_price  
		END AS sls_price,  

		-- Keep quantity as is  
		[sls_quantity]  

	FROM bronze.crm_sales_details;  
	SET @end_time =GETDATE();
	PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time,@end_time) AS Nvarchar) + 'seconds';
	PRINT '>> -------------';
	--======================================================================================================================================--
	PRINT '---------------------------------';
	PRINT 'Loading ERP tables';
	PRINT '---------------------------------';
--======================================================================================================================================--
	SET @start_time =GETDATE();
	PRINT '>> Truncating table silver.erp_cust_az12';
	-- Remove all existing records from the target table 
	TRUNCATE TABLE silver.erp_cust_az12

	-- Insert transformed data into the target table
	INSERT INTO silver.erp_cust_az12(
	cid,
	bdate,
	gen
	)
	SELECT  
		-- Remove 'NAS' prefix from cid if it exists, otherwise keep it unchanged  
		CASE  
			WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))  
			ELSE cid  
		END AS cid,  
		-- Set birthdate to NULL if it's in the future, otherwise keep it as is  
		CASE  
			WHEN bdate > GETDATE() THEN NULL  
			ELSE bdate  
		END AS bdate,  
		-- Standardize gender values ('F' or 'Female' → 'Female', 'M' or 'Male' → 'Male', others → 'n/a')  
		CASE  
			WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'  
			WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'  
			ELSE 'n/a'  
		END AS gen  
	FROM bronze.erp_cust_az12;  
	SET @end_time =GETDATE();
	PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time,@end_time) AS Nvarchar) + 'seconds';
	PRINT '>> -------------';
	--======================================================================================================================================--
	SET @start_time =GETDATE();
	PRINT '>> Truncating table silver.erp_loc_a101';
	-- Remove all existing records from the target table  
	TRUNCATE TABLE silver.erp_loc_a101;  

	-- Insert transformed data into the target table  
	INSERT INTO silver.erp_loc_a101(  
		cid,  
		cntry  
	)  
	SELECT  
		-- Remove dashes from cid  
		REPLACE(cid, '-', '') AS cid,  

		-- Standardize country names  
		CASE  
			WHEN TRIM(cntry) = 'DE' THEN 'Germany'  
			WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'  
			WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'  
			ELSE TRIM(cntry)  
		END AS cntry  

	FROM bronze.erp_loc_a101;  
	SET @end_time =GETDATE();
	PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time,@end_time) AS Nvarchar) + 'seconds';
	PRINT '>> -------------';

	--======================================================================================================================================--
	--this table is clean , no notes
	SET @start_time =GETDATE();
	PRINT '>> Truncating table silver.erp_px_cat_g1v2';
	TRUNCATE TABLE silver.erp_px_cat_g1v2;
	INSERT INTO silver.erp_px_cat_g1v2(
	id,
	cat,
	subcat,
	maintenance
	)
	select
	id,
	cat,
	subcat,
	maintenance
	FROM bronze.erp_px_cat_g1v2;
		SET @end_time =GETDATE();
	PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time,@end_time) AS Nvarchar) + 'seconds';
	PRINT '>> -------------';

	--======================================================================================================================================--

	END TRY
	BEGIN CATCH
		PRINT '================================'
		PRINT 'ERROR OCCURED DURING LOADING BRONZE LAYER'
		PRINT 'Error Message' + ERROR_MESSAGE();
		PRINT 'Error Message' + CAST (ERROR_MESSAGE() AS NVARCHAR);
		PRINT 'Error Message' + CAST (ERROR_STATE() AS NVARCHAR);
		PRINT '================================'
	END CATCH
END
